<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sky.logPlugin.dao.impl.mapper.ContentScanDataMapper">
   
   	<!-- //MyBatis生成工具方法 BEGIN -->
   	<sql id="tableName" >
		content_scan_data 
	</sql>
   
   <!-- BaseResultMap for table columns  -->
    <resultMap id="BaseResultMap" type="com.sky.logPlugin.dao.entity.ContentScanDataEntity">
        <id column="id" property="id" jdbcType="BIGINT"/>
		<result column="appKey" property="appKey" jdbcType="VARCHAR"/>
		<result column="requestId" property="requestId" jdbcType="VARCHAR"/>
		<result column="syncType" property="syncType" jdbcType="BIT"/>
		<result column="contentId" property="contentId" jdbcType="BIGINT"/>
		<result column="content" property="content" jdbcType="VARCHAR"/>
		<result column="businessType" property="businessType" jdbcType="TINYINT"/>
		<result column="contentType" property="contentType" jdbcType="TINYINT"/>
		<result column="scene" property="scene" jdbcType="VARCHAR"/>
		<result column="taskId" property="taskId" jdbcType="VARCHAR"/>
		<result column="scanTimes" property="scanTimes" jdbcType="TINYINT"/>
		<result column="scanResult" property="scanResult" jdbcType="TINYINT"/>
		<result column="status" property="status" jdbcType="BIT"/>
		<result column="valid" property="valid" jdbcType="BIT"/>
		<result column="createBy" property="createBy" jdbcType="BIGINT"/>
		<result column="createByType" property="createByType" jdbcType="TINYINT"/>
		<result column="createTime" property="createTime" jdbcType="TIMESTAMP"/>
		<result column="updateBy" property="updateBy" jdbcType="BIGINT"/>
		<result column="updateByType" property="updateByType" jdbcType="TINYINT"/>
		<result column="updateTime" property="updateTime" jdbcType="TIMESTAMP"/>
		<result column="soDoneCode" property="soDoneCode" jdbcType="BIGINT"/>
		<result column="remark" property="remark" jdbcType="VARCHAR"/>
		<result column="roomDesc" property="roomDesc" jdbcType="VARCHAR"/>
    </resultMap>

    <!-- Base_Column_List 本表的列名 -->
    <sql id="Base_Column_List">
        id,appKey,requestId,syncType,contentId,content,businessType,contentType,scene,taskId,scanTimes,scanResult,status,valid,createBy,createByType,createTime,updateBy,updateByType,updateTime,soDoneCode,remark,roomDesc    
    </sql>
	
	<!-- insert 插入-->
    <insert id="insert" parameterType="com.sky.logPlugin.dao.entity.ContentScanDataEntity">
        <selectKey resultType="Long" keyProperty="id" order="AFTER">
            SELECT @@IDENTITY
        </selectKey>
        INSERT INTO <include refid="tableName"/> 
        ( id,appKey,requestId,syncType,contentId,content,businessType,contentType,scene,taskId,scanTimes,scanResult,status,valid,createBy,createByType,createTime,updateBy,updateByType,updateTime,soDoneCode,remark,roomDesc)
        VALUES 
        (#{id,jdbcType=BIGINT} ,#{appKey,jdbcType=VARCHAR} ,#{requestId,jdbcType=VARCHAR} ,#{syncType,jdbcType=BIT} ,#{contentId,jdbcType=BIGINT} ,#{content,jdbcType=VARCHAR} ,#{businessType,jdbcType=TINYINT} ,#{contentType,jdbcType=TINYINT} ,#{scene,jdbcType=VARCHAR} ,#{taskId,jdbcType=VARCHAR} ,#{scanTimes,jdbcType=TINYINT} ,#{scanResult,jdbcType=TINYINT} ,#{status,jdbcType=BIT} ,#{valid,jdbcType=BIT} ,#{createBy,jdbcType=BIGINT} ,#{createByType,jdbcType=TINYINT} ,#{createTime,jdbcType=TIMESTAMP} ,#{updateBy,jdbcType=BIGINT} ,#{updateByType,jdbcType=TINYINT} ,#{updateTime,jdbcType=TIMESTAMP} ,#{soDoneCode,jdbcType=BIGINT} ,#{remark,jdbcType=VARCHAR} ,#{roomDesc,jdbcType=VARCHAR}  )
    </insert>
    
    <!-- insertList 批量插入-->
	<insert id="insertList"  parameterType="List" >
		INSERT INTO <include refid="tableName"/> 
		(id,appKey,requestId,syncType,contentId,content,businessType,contentType,scene,taskId,scanTimes,scanResult,status,valid,createBy,createByType,createTime,updateBy,updateByType,updateTime,soDoneCode,remark,roomDesc)
		VALUES 
		<foreach collection="list" item="item" index="index" separator=",">
			(#{item.id,jdbcType=BIGINT} ,#{item.appKey,jdbcType=VARCHAR} ,#{item.requestId,jdbcType=VARCHAR} ,#{item.syncType,jdbcType=BIT} ,#{item.contentId,jdbcType=BIGINT} ,#{item.content,jdbcType=VARCHAR} ,#{item.businessType,jdbcType=TINYINT} ,#{item.contentType,jdbcType=TINYINT} ,#{item.scene,jdbcType=VARCHAR} ,#{item.taskId,jdbcType=VARCHAR} ,#{item.scanTimes,jdbcType=TINYINT} ,#{item.scanResult,jdbcType=TINYINT} ,#{item.status,jdbcType=BIT} ,#{item.valid,jdbcType=BIT} ,#{item.createBy,jdbcType=BIGINT} ,#{item.createByType,jdbcType=TINYINT} ,#{item.createTime,jdbcType=TIMESTAMP} ,#{item.updateBy,jdbcType=BIGINT} ,#{item.updateByType,jdbcType=TINYINT} ,#{item.updateTime,jdbcType=TIMESTAMP} ,#{item.soDoneCode,jdbcType=BIGINT} ,#{item.remark,jdbcType=VARCHAR} ,#{item.roomDesc,jdbcType=VARCHAR} )
		</foreach>
	</insert>
	
	<!-- findById 通过ID查询对象 返回单个对象-->
    <select id="findById" resultMap="BaseResultMap" parameterType="Long">
       SELECT 
        <include refid="Base_Column_List"/>
        FROM <include refid="tableName"/>
        WHERE id = #{id,jdbcType=BIGINT}
 AND valid = 1     </select>
    
    <!-- findByIds 通过多个ID查询对象 返回列表 -->
    <select id="findByIds" resultMap="BaseResultMap" parameterType="List">
       SELECT 
        <include refid="Base_Column_List"/>
        FROM <include refid="tableName"/>
	WHERE id IN
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item,jdbcType=BIGINT}
		</foreach>
 AND valid = 1     </select>
    
    <!-- deleteById  通过ID来逻辑删除一条记录 -->
    <update id="deleteById" parameterType="Long">
      UPDATE <include refid="tableName"/> SET valid = 0
        WHERE id = #{id,jdbcType=BIGINT}
 AND valid = 1     </update>
    
     <!-- deleteByIds 通过多个ID来逻辑删除多条记录  -->
    <update id="deleteByIds" parameterType="List">
      UPDATE <include refid="tableName"/> SET valid = 0
        WHERE  id IN
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item,jdbcType=BIGINT}
		</foreach>
 AND valid = 1     </update>

    <!-- 通过ID更新一条记录 -->
	<update id="update" parameterType="com.sky.logPlugin.dao.entity.ContentScanDataEntity">
		UPDATE <include refid="tableName"/> 
		<set>
			appKey = #{appKey,jdbcType=VARCHAR},
			requestId = #{requestId,jdbcType=VARCHAR},
			syncType = #{syncType,jdbcType=BIT},
			contentId = #{contentId,jdbcType=BIGINT},
			content = #{content,jdbcType=VARCHAR},
			businessType = #{businessType,jdbcType=TINYINT},
			contentType = #{contentType,jdbcType=TINYINT},
			scene = #{scene,jdbcType=VARCHAR},
			taskId = #{taskId,jdbcType=VARCHAR},
			scanTimes = #{scanTimes,jdbcType=TINYINT},
			scanResult = #{scanResult,jdbcType=TINYINT},
			status = #{status,jdbcType=BIT},
			valid = #{valid,jdbcType=BIT},
			createBy = #{createBy,jdbcType=BIGINT},
			createByType = #{createByType,jdbcType=TINYINT},
			createTime = #{createTime,jdbcType=TIMESTAMP},
			updateBy = #{updateBy,jdbcType=BIGINT},
			updateByType = #{updateByType,jdbcType=TINYINT},
			updateTime = #{updateTime,jdbcType=TIMESTAMP},
			soDoneCode = #{soDoneCode,jdbcType=BIGINT},
			remark = #{remark,jdbcType=VARCHAR},
			roomDesc = #{roomDesc,jdbcType=VARCHAR},
		</set>
		WHERE id = #{id,jdbcType=BIGINT}
 AND valid = 1 	</update>	
	
	<!-- updateList -->
	<update id="updateList" parameterType="List">
		<foreach collection="list" item="item" index="index" open="" close="" separator=";">
			UPDATE <include refid="tableName"/> 
		<set>
			appKey = #{item.appKey,jdbcType=VARCHAR},
			requestId = #{item.requestId,jdbcType=VARCHAR},
			syncType = #{item.syncType,jdbcType=BIT},
			contentId = #{item.contentId,jdbcType=BIGINT},
			content = #{item.content,jdbcType=VARCHAR},
			businessType = #{item.businessType,jdbcType=TINYINT},
			contentType = #{item.contentType,jdbcType=TINYINT},
			scene = #{item.scene,jdbcType=VARCHAR},
			taskId = #{item.taskId,jdbcType=VARCHAR},
			scanTimes = #{item.scanTimes,jdbcType=TINYINT},
			scanResult = #{item.scanResult,jdbcType=TINYINT},
			status = #{item.status,jdbcType=BIT},
			valid = #{item.valid,jdbcType=BIT},
			createBy = #{item.createBy,jdbcType=BIGINT},
			createByType = #{item.createByType,jdbcType=TINYINT},
			createTime = #{item.createTime,jdbcType=TIMESTAMP},
			updateBy = #{item.updateBy,jdbcType=BIGINT},
			updateByType = #{item.updateByType,jdbcType=TINYINT},
			updateTime = #{item.updateTime,jdbcType=TIMESTAMP},
			soDoneCode = #{item.soDoneCode,jdbcType=BIGINT},
			remark = #{item.remark,jdbcType=VARCHAR},
			roomDesc = #{item.roomDesc,jdbcType=VARCHAR},
		</set>
		WHERE id = #{item.id,jdbcType=BIGINT}
 AND valid = 1 		 </foreach>
	</update>

	<update id="updateAppKeyByid">

		UPDATE risk.content_scan_data a SET a.appKey = #{appKey} WHERE id = #{id}
	</update>

	<!-- existsById  通过ID判读是否存在，存在将返回1，不存在将返回NULL,要当心了 -->
    <select id="existsById" resultType="java.lang.Integer" parameterType="Long">
       SELECT 1 FROM <include refid="tableName"/>
        WHERE id = #{id,jdbcType=BIGINT}
 AND valid = 1     </select>
	<select id="getAppkeyById" resultType="java.lang.String">

		SELECT appKey from `risk`.`content_scan_data` WHERE  id = #{id}
	</select>

	<select id="getRequestIdById" resultType="java.lang.String">

		SELECT requestId from `risk`.`content_scan_data` WHERE  id = #{id}
	</select>


	<!-- //MyBatis生成工具方法开 END -->
	

	<!-- //自定义方法 BEGIN -->


	<!-- //自定义方法 END -->


</mapper>